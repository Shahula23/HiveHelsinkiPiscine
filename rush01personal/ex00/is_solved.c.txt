/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   is_solved.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: niarygin <niarygin@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/25 16:05:38 by niarygin          #+#    #+#             */
/*   Updated: 2024/02/25 19:12:26 by niarygin         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	is_valid_number(int table[4][4], int provided_numbers[16], int position);

// This function checks if previous fields are filled with the same number.
// 1st while loop checks the row until our position (from left to right).
// 2nd while loop checks the column until our position (from top to bottom).
int	is_number_repeated(int table[4][4], int position, int number)
{
	int	row;
	int	col;
	int	i;

	i = 0;
	row = position / 4;
	col = position % 4;
	while (i < col)
	{
		if (table[row][i] == number)
			return (1);
		i++;
	}
	i = 0;
	while (i < row)
	{
		if (table[i][col] == number)
			return (1);
		i++;
	}
	return (0);
}

// This function fill the field with possible number (start from 1) and 
// checks if the constraints are fulfilled (that it is a valid number).
// Then we repeat this process recursively for the next field (in this 
// case the position in the table is changed to the next one).
// If this number is not valid then we remove this number and set
// field value back to zero.
// Then we check the next possible number (e.g. 2)
//  and repeat the process.
//
//  If all fields are filled with valid numbers, the function returns 1.
//  If possible number wasn't found for the field, it returns 0.

int	is_solved(int table[4][4], int provided_numbers[16], int position)
{
	int	number;
	int	row;
	int	col;

	if (position == 16)
		return (1);
	number = 1;
	while (number <= 4)
	{
		if (!is_number_repeated(table, position, number))
		{
			row = position / 4;
			col = position % 4;
			table[row][col] = number;
			if (is_valid_number(table, provided_numbers, position))
			{
				if (is_solved(table, provided_numbers, position + 1))
					return (1);
			}
			else
				table[row][col] = 0;
		}
		number++;
	}
	return (0);
}
